const fs = require('fs');

const generateLogos = () => {
  const saveDir = `./src/xml`
  const svgDir = `./assets/svgs/`;

  let logoIndexOutput = `/**
 * Generated by scripts/generate-logos.js
 * DO NOT EDIT!
 */

`;

let logoMap = {};

let logoStoryOutput = `/**
 * Generated by scripts/generate-logos.js
 * DO NOT EDIT!
 */

import { storiesOf } from '@storybook/react-native';
import { Story, UseCase } from '@taimoormk/react-native-commons-collection/views';
import React, { ReactElement } from 'react';
import { LogoWrapper, StyledScrollView, StyledView, TextWrapper } from './styled';
import { Logo } from '../src/logo';

storiesOf('Logo', module)
  `;

  // Read root Svg logo directory
  fs.readdirSync(svgDir).forEach(fileName => {
    if (fileName === '.DS_Store') return;

    // globalFileNames.push(fileName);
    logoMap[fileName] = {};
    const subDir = `${svgDir}${fileName}`;

let logoListOutput = `/**
 * Generated by scripts/generate-logos.js
 * DO NOT EDIT!
 */

`;
    // Read sub-directory
    return fs.readdirSync(subDir).forEach(subDirFileName => {
      // trim qoutes & .svg off subDirFileName
      let trimmedStr = subDirFileName.replace(/(.svg)|-/g, '');
      let svgContent = fs.readFileSync(`${subDir}/${subDirFileName}`, 'utf8');
      logoListOutput += `export const ${trimmedStr} = () : string => \`${svgContent}\`;
  `;

    logoMap[fileName][trimmedStr] = () => `<LogoWrapper>
              <Logo logo="${trimmedStr}" />
                <TextWrapper>
                  ${trimmedStr}
                </TextWrapper>
              </LogoWrapper>`;

    logoIndexOutput += `export { ${trimmedStr} } from './${fileName}'
  `;
    
    fs.writeFileSync(`${saveDir}/${fileName}.ts`, logoListOutput);
    fs.writeFileSync(`${saveDir}/index.ts`, logoIndexOutput);
    });
  });
  Object.keys(logoMap).map(category => {
    logoStoryOutput += `.add('${category}', () : ReactElement => (
    <Story>
      <UseCase
        text="Logo => ${category}"
      >
        <StyledScrollView>
          <StyledView>
            ${Object.values(logoMap[category]).map(value => value()).join('')}
          </StyledView>
        </StyledScrollView>
      </UseCase>
    </Story>
  ))
`;
  });
  fs.writeFileSync(`./__stories__/logo.story.tsx`, logoStoryOutput);
};

generateLogos();
