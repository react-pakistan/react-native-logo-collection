const fs = require('fs');

const generateIcons = () => {
  const saveDir = `./src/xml`
  const svgDir = `./assets/svgs/`;

  let iconIndexOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;

let iconMap = {};

let iconStoryOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

import { storiesOf } from '@storybook/react-native';
import { Story, UseCase } from '@taimoormk/react-native-commons-collection/views';
import React, { ReactElement } from 'react';
import { IconWrapper, StyledScrollView, StyledView, TextWrapper } from './styled';
import { Icon } from '../src/icon';

storiesOf('Icon', module)
  `;

  // Read root Svg icon directory
  fs.readdirSync(svgDir).forEach(fileName => {
    if (fileName === '.DS_Store') return;

    // globalFileNames.push(fileName);
    iconMap[fileName] = {};
    const subDir = `${svgDir}${fileName}`;

let iconListOutput = `/**
 * Generated by scripts/generate-icons.js
 * DO NOT EDIT!
 */

`;
    // Read sub-directory
    return fs.readdirSync(subDir).forEach(subDirFileName => {
      // trim qoutes & .svg off subDirFileName
      let trimmedStr = subDirFileName.replace(/(.svg)|-/g, '');
      let svgContent = fs.readFileSync(`${subDir}/${subDirFileName}`, 'utf8');
      iconListOutput += `export const ${trimmedStr} = () : string => \`${svgContent}\`;
  `;

    iconMap[fileName][trimmedStr] = () => `<IconWrapper>
              <Icon icon="${trimmedStr}" />
                <TextWrapper>
                  ${trimmedStr}
                </TextWrapper>
              </IconWrapper>`;

    iconIndexOutput += `export { ${trimmedStr} } from './${fileName}'
  `;
    
    fs.writeFileSync(`${saveDir}/${fileName}.ts`, iconListOutput);
    fs.writeFileSync(`${saveDir}/index.ts`, iconIndexOutput);
    });
  });
  Object.keys(iconMap).map(category => {
    iconStoryOutput += `.add('${category}', () : ReactElement => (
    <Story>
      <UseCase
        text="Icon => ${category}"
      >
        <StyledScrollView>
          <StyledView>
            ${Object.values(iconMap[category]).map(value => value()).join('')}
          </StyledView>
        </StyledScrollView>
      </UseCase>
    </Story>
  ))
`;
  });
  fs.writeFileSync(`./__stories__/icon.story.tsx`, iconStoryOutput);
};

generateIcons();
